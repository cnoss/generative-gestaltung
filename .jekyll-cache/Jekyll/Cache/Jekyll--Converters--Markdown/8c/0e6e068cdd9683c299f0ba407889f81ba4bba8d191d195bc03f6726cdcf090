I"<h2 id="c2-mandala-mit-kamera-input">C2 Mandala mit Kamera Input</h2>
<p>Wie Aufgabe C1.3, aber diesmal ziehen wir die Farbe aus dem Kamerabild mit Hilfe der p5 Funktion <a href="https://p5js.org/reference/#/p5/createCapture">createCapture</a>.</p>

<p><strong>Kamerabild akquirieren</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pixelDensity(1);
video = createCapture(VIDEO);
video.size(1,1);
</code></pre></div></div>

<p><strong>RGB Werte aus dem Pixel ziehen</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>video.loadPixels();
let r = video.pixels[0]; 
let g = video.pixels[1];
let b = video.pixels[2];
</code></pre></div></div>

<h2 id="c3-mandala-mit-audio-input">C3 Mandala mit Audio Input</h2>
<p>Wie zuvor, aber diesmal ziehen wir die Transparenz oder einen anderen Parameter aus dem Audiosignal. Dazu nutzen wir die <a href="https://github.com/processing/p5.js-sound">p5.sound</a>.</p>

<p><strong>Audiosignal akquirieren</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mic = new p5.AudioIn();
mic.start();
</code></pre></div></div>

<p><strong>Pegel des Mikrofons holen</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mic.getLevel();
</code></pre></div></div>

<h2 id="c4--c41-handtracking">C4 &amp; C4.1 Handtracking</h2>
<p>Jetzt wird es lustig ‚Ä¶¬†und komlex. Wir nutzen <a href="https://github.com/victordibia/handtrack.js/">Handtracking.js</a> zur Steuerung. Dazu brauchen wir ein bisschen zus√§tzlichen Code.</p>

<p><strong>Erg√§nzungen f√ºr den Deklarationsblock</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let videoCapture;
const handimg = document.getElementById("handimage");
const canvasHT = document.getElementById("canvasHT");
const context = canvasHT.getContext("2d");

const modelParams = {
  flipHorizontal: true,   // flip e.g for video  
  maxNumBoxes: 20,        // maximum number of boxes to detect
  iouThreshold: 0.5,      // ioU threshold for non-max suppression
  scoreThreshold: 0.6,    // confidence threshold for predictions.
}

let imgindex = 1;
let isVideo = false;
let model = null;
</code></pre></div></div>

<p><strong>Erg√§nzung der Custom Functions</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function startVideo() {
  handTrack.startVideo(videoCapture).then(function (status) {
      if (status) {
          isVideo = true
          runDetection()
      } else {
      }
  });
}

function runDetection() {
  model.detect(videoCapture).then(predictions =&gt; {
    //console.log("Predictions: ", predictions);
    if (predictions[0]) {
      [drawingParams.x, drawingParams.y, drawingParams.w] = predictions[0].bbox;
    }
    if (predictions[1]) {
      [drawingParams.cw] = predictions[1].bbox;
    }
    if (isVideo) {
      requestAnimationFrame(runDetection);
    }
  });
}
</code></pre></div></div>

<p><strong>Erg√§nzung der Setup Funktion</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pixelDensity</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
<span class="n">video</span> <span class="p">=</span> <span class="n">createCapture</span><span class="p">(</span><span class="n">VIDEO</span><span class="p">);</span>
<span class="n">video</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">320</span><span class="p">,</span> <span class="m">240</span><span class="p">);</span>
<span class="n">video</span><span class="p">.</span><span class="n">class</span><span class="p">(</span><span class="s2">"previewVideo"</span><span class="p">);</span>
<span class="n">video</span><span class="p">.</span><span class="n">id</span><span class="p">(</span><span class="s2">"video"</span><span class="p">);</span>
<span class="n">videoCapture</span> <span class="p">=</span> <span class="n">document</span><span class="p">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s2">"video"</span><span class="p">);</span>
<span class="n">video</span><span class="p">.</span><span class="n">hide</span><span class="p">();</span>

<span class="p">//</span> <span class="nf">Load</span> <span class="n">the</span> <span class="k">model</span> <span class="k">and</span> <span class="n">start</span> <span class="n">video</span>
<span class="n">handTrack</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">modelParams</span><span class="p">).</span><span class="k">then</span><span class="p">(</span><span class="n">lmodel</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">model</span> <span class="p">=</span> <span class="n">lmodel</span>
  <span class="n">startVideo</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<p><strong>Nutzung der Daten in der Draw Funktion</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let x = map(drawingParams.x, 0, 320, 0, width);
let y = map(drawingParams.y, 0, 240, 0, height);
let w = map(drawingParams.y, 0, 320, 0, 100);
let cw = map(drawingParams.cw, 0, 320, 0, 360);
</code></pre></div></div>
:ET