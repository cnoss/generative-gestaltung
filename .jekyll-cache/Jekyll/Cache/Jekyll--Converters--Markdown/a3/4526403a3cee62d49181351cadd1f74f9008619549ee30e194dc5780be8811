I"V<h2 id="klassen">Klassen</h2>

<p>Wenn Elemente komplexer werden und/oder h√§ufiger ben√∂tigt werden, lohnt sie der Einsatz von Klassen. Die Idee ist dabei, dass man mit Hilfe der Klasse eine Art Muster oder Template f√ºr ein Element, bzw. Objekt erzeugt und dieses Muster dann beliebig oft nutzen, bzw. instanzieren kann.</p>

<h3 id="eine-klasse-erzeugen">Eine Klasse erzeugen</h3>
<p>Die Klasse, also das Template wird wie folgt erzeugt:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Ball {
  constructor( x, y ) { 
    this.x = x;
    this.y = y;
  }
}
</code></pre></div></div>

<p>Jede Klasse braucht einen Konstruktor, der beim Instanzieren der Klasse automatisch ausgef√ºhrt wird. Bei der Instanzierung k√∂nnen Parameter √ºbergeben werden, die dann mit dem Schl√ºsselwort <em>this.</em> an das Objekt gebunden werden, sprich: sie gelten nur innerhalb dieses Objekts.</p>

<h3 id="ein-objekt-erzeugen">Ein Objekt erzeugen</h3>

<p>Nun k√∂nnen wir eine neue Instanz/ Objekt mit Hilfe der Klasse erzeugen. In diesem Beispiel wird ein neuer <em>Ball</em> auf Basis der Klasse <em>Ball</em> erzeugt und ihm wird die aktuelle Mausposition √ºbergeben.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let ball = new Ball(mouseX, mouseY);
</code></pre></div></div>

<p>Sie sehen, sie sehen nichts. Trotzdem wurde in neues Objekt erzeugt und in der Variable <em>ball</em> gespeichert. Da die Klasse aber bislang nichts zeichnet, sehen wir auch nichts.</p>

<h3 id="funktionen-in-klassen">Funktionen in Klassen</h3>
<p>Klassen haben zumeist auch Funktionen, denn sie sollen ja irgendwas machen. In unserem Beispiel soll die etwas zeichnen, daher spendieren wir der Klasse noch die Funktion <em>zeichnen</em>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Ball {
  constructor( x, y ) { 
    this.x = x;
    this.y = y;
    this.size = 20;
    this.fill = 255;
  }
  zeichnen(){
    fill(255);
    ellipse(this.x, this.y, this.size);
  }
}
</code></pre></div></div>

<p>Diese Funktion m√ºssen wir aber auch aufrufen:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ball.zeichnen();
</code></pre></div></div>

<h3 id="viele-instanzen-mit-arrays">Viele Instanzen mit Arrays</h3>

<p>Meistens setzen wir Klassen ein, wenn wir die abgeleiteten Objekte mehrfach nutzen. Dabei helfen Arrays. Wir legen also zun√§chst ein leeres Array im Deklarationsbereich unseres Skripts an:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let balls = [];
</code></pre></div></div>

<p>Jetzt w√ºrden wir neue Instanzen/ Objekte diesem Array hinzug√ºf√ºgen, z.B. beim Mausklick:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function mouseReleased() {
  balls.push(new Ball(mouseX, mouseY));
}
</code></pre></div></div>

<p>Dann h√§tten wir bei jedem Klick das Array <em>balls</em> um eine neue Instanz von <em>Ball</em> erg√§nzt. Jetzt m√ºssen wir in der <em>Draw</em> Funktion jeweils f√ºr alle Elements in <em>balls</em> die <em>zeichnen</em> Funktion aufrufen:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>balls.forEach(
  (ball, index) =&gt; { 
    ball.zeichnen();
  }
);
</code></pre></div></div>

<p>Weitere Information finden Sie in den <a href="https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Klassen">MDN WebDocs</a> und bei <a href="https://www.youtube.com/watch?v=xG2Vbnv0wvg&amp;list=PLRqwX-V7Uu6Zy51Q-x9tMWIv9cueOFTFA&amp;t=0s">Dan Shiffmanns COding Train</a>.</p>
:ET